module QFT

export gen_qft, gen_iqft
using QuantExQASM.GateOps
using QuantExQASM.Circuit

"""
    gen_qft(qubit_indices::Vector{Int})

Generates an OpenQASM representation of the quantum Fourier transform
for the given number of qubits.

"""
function gen_qft!(cct::Circuit.Circ, qubit_indices::Vector{Int})
    # k=0, identity; k=1, Z; k=2, sqrt(Z)
    angle(k) = 2*pi / 2^k;
    for (iidx,ival) = Iterators.reverse(enumerate(qubit_indices))

        Circuit.add_gatecall!(cct, GateOps.hadamard(qubit_indices[iidx]))

        for (jidx,jval) = Iterators.reverse(enumerate(qubit_indices[1:iidx-1]))
            theta = angle(iidx - jidx);
            Circuit.add_gatecall!(cct, GateOps.c_r_phase(ival, jval, theta))
        end
    end
    for idx = 1:div(length(qubit_indices),2)
        Circuit.add_gatecall!(cct, GateOps.c_pauli_x(qubit_indices[idx], qubit_indices[length(qubit_indices)-idx+1]));
        Circuit.add_gatecall!(cct, GateOps.c_pauli_x(qubit_indices[length(qubit_indices)-idx+1], qubit_indices[idx]));
        Circuit.add_gatecall!(cct, GateOps.c_pauli_x(qubit_indices[idx], qubit_indices[length(qubit_indices)-idx+1]));
    end
end

"""
    gen_iqft(qubit_indices::Vector{Int})

Generates an OpenQASM representation of the inverse quantum Fourier transform
for the given number of qubits.

"""
function gen_iqft!(cct::Circuit.Circ, qubit_indices::Vector{Int})
    angle(k) = -2*pi / 2^k;
    for (iidx,ival) = enumerate(qubit_indices)
        for (jidx,jval) = enumerate(qubit_indices[1:iidx-1])
            theta = angle(iidx - jidx);
            Circuit.add_gatecall!(cct, GateOps.c_r_phase(ival, jval, theta))
        end
        Circuit.add_gatecall!(cct, GateOps.hadamard(qubit_indices[iidx]))
    end
    for idx = 1:div(length(qubit_indices),2)
        Circuit.add_gatecall!(cct, GateOps.c_pauli_x(qubit_indices[idx], qubit_indices[length(qubit_indices)-idx+1]));
        Circuit.add_gatecall!(cct, GateOps.c_pauli_x(qubit_indices[length(qubit_indices)-idx+1], qubit_indices[idx]));
        Circuit.add_gatecall!(cct, GateOps.c_pauli_x(qubit_indices[idx], qubit_indices[length(qubit_indices)-idx+1]));
    end
end

end
